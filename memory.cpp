#include "std.h"

#include "memory.h"

//=============================================================================
//	eRom::eRom
//-----------------------------------------------------------------------------
eRom::eRom() : items(NULL)
{
	items = new byte[ROM_SIZE];
}
//=============================================================================
//	eRom::~eRom
//-----------------------------------------------------------------------------
eRom::~eRom()
{
	delete items;
}
//=============================================================================
//	eRom::Init
//-----------------------------------------------------------------------------
void eRom::Init()
{
	FILE* f = fopen("D:/emuls/ZX/emuls/US0373/sos.rom", "rb");
	if(f)
	{
		fread(items, 1, ROM_SIZE, f);
		fclose(f);
	}
}
//=============================================================================
//	eRom::Read
//-----------------------------------------------------------------------------
bool eRom::Read(word addr, byte* v) const
{
	if(addr >= ROM_START && addr < ROM_SIZE)
	{
		*v = items[addr];
		return true;
	}
	return false;
}

//=============================================================================
//	eRam::eRam
//-----------------------------------------------------------------------------
eRam::eRam() : items(NULL)
{
	items = new byte[RAM_SIZE]; //48k speccy
}
//=============================================================================
//	eRam::~eRam
//-----------------------------------------------------------------------------
eRam::~eRam()
{
	delete items;
}
//=============================================================================
//	eRam::Read
//-----------------------------------------------------------------------------
bool eRam::Read(word addr, byte* v) const
{
	if(addr >= RAM_START && addr < RAM_SIZE)
	{
		*v = items[addr];
		return true;
	}
	return false;
}
//=============================================================================
//	eRam::Write
//-----------------------------------------------------------------------------
void eRam::Write(word addr, byte v)
{
	if(addr >= RAM_START && addr < RAM_SIZE)
	{
		items[addr] = v;
	}
}
